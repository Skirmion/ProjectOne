#include <conio.h>
#include <iostream>

class Node
{
public:

	int value;
	Node* Next;

	Node()
	{
		int value = 0;
		Node* Next = NULL;
	}

	Node(int value, Node* Next)
	{
		this->value = value;
		this->Next = Next;
	}
};

class List
{
	Node* Head;
public:
	List() { Head = NULL; }
	~List();
	void add(int);
	int Pop();
	int len();
	void operator=(List*);
	List operator+(List*);
private:
	//class Node;
	Node getHead();
	void clear();
	void copy(List*);
};

List::~List()
{
	clear();
	delete Head;
}

void List::add(int value)
{
	Node* temp = new Node;
	temp->value = value;
	temp->Next = Head;
	Head = temp;
}

int List::Pop()
{
	int value = Head->value;
	Head = Head->Next;
	return value;
}

int List::len()
{
	Node* temp = Head;
	int count = 0;

	while (temp)
	{
		count++;
		temp = temp->Next;
	}

	return count;
}

Node List::getHead()
{
	if (Head != NULL)
	{
		return *Head;
	}
}

void List::operator=(List* list)
{
	copy(list);
}

void List::copy(List* list)
{
	clear();

	Node* temp = list->Head;

	while (temp)
	{
		Head = new Node{ temp->value, Head };
		temp = temp->Next;
	};
};

void List::clear()
{
	while (Head != NULL)
	{
		Node* temp = Head->Next;
		delete Head;
		Head = temp;
	}
}

List List::operator+(List* list)
{
	Node* temp = Head;
	temp = list->Head;

	while (temp)
	{
		Head = new Node{ temp->value, Head };
		temp = temp->Next;
	}

	return List();
}
